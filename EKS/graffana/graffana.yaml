kind: Namespace
apiVersion: v1
metadata:
  name: grafana
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: grafana-storage
  namespace: grafana
spec:
  accessModes: [ "ReadWriteOnce" ]
  storageClassName: gp2
  resources:
   requests:
    storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - image: grafana/grafana
        name: grafana
        ports:
        - containerPort: 3000
          name: http

        volumeMounts:
          - name: grafana-storage
            mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 472
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: grafana
  labels:
    app: grafana
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: grafana
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana.eks.eme-devops.com
  namespace: grafana
  annotations:
    kubernetes.io/ingress.class: "nginx"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.org/client-max-body-size: "100m"
spec:
  tls:
  - hosts:
    - grafana.eks.eme-devops.com
    secretName: grafana.eks.eme-devops.com
  rules:
  - host: grafana.eks.eme-devops.com
    http:
      paths:
        - path: /
          backend:
            serviceName: grafana
            servicePort: 80
